🐳🐳🐳🐳🐳 Docker basics 🐳🐳🐳🐳🐳🐳

>> docker ps
  => Estado de contenedores docker en ejecución
>> docker ps -a
  => El estado de contenedores incluyendo los que no estan en ejecución.
>> docker inspect [id] or [name]
  => Muestra la metada del contenedor.
  => Muy importante al desarrollar y querer por ejemplo obtener un variable de entorno.
>> docker inspect -f '{{ json .Config.Env }}' [id] or [name]
  => Metadata filtrada y parseada a json
  => El formato del filtro es Go, docker esta hecho en Go.
  => json significa el format que le quiero hacer.
  => El .Config.Env significa las variables que busco.
>> docker rename [old_name] [new_name]
  => Renombra un contenedor
>> docker run --name [new_name] [imagen]
  => Renombra y corre la imagen hello-world
  => La bandera --name nos permite colocar un nombre de entrada.
>> docker logs [id] or [name] => logs
>> docker logs hola-mundo => Muestra los logs no ejecuta de nuevo el contenedor.
>> docker rm [id] or [name] => Elimina un contenedor
>> docker ps -aq => Muestra unicamente los ids de los contenedores
>> docker rm $(docker ps -aq) => Elimina una lista de contenedores por id

>> docker run ubuntu
    => se descarga la imagen de ubuntu.
    => solo corrio /bin/bash

>> docker run -it ubuntu
  => -it Me deja la terminar del contenedor abierta en mi bash.
  => Ahora quedamos en ubuntu.

Ciclo de vida de un contenedor:

Crear un contenedor que no se apague
>> docker run ubuntu tail -f /dev/null

Un contenedor solo se apaga si su comando
  => root deja de funcionar o termina lo
  => que debia hacer.

>> docker run -d --name server nginx
  => Decimos --detach(-d) si esto tiene
  => output, no quiero estar atachado a el.

-p 8080:80 significa publisher
  => sirve para publicar un puerto de mi
  => maquina y conectarlo con el del contenedor
  => 8080 significa mi host
  => 80 significa el puesto del contenedor

Si corremos localhost:8080 en el navegador
  => podremos ver nuestro nginx

Corriendo una base de datos:
>> docker run -d --name db mongo

vemos los logs >> dockerlogs db
>> docker exec -it db bash

Persistir datos con docker:

 DOCKER BIND MOUNT:
 Como crear un contenedor con datos
 compartidos del sistema de archivos del
 host que no es del contenedor:

 Creamos un folder con mkdir antes de correr
 el contenedor.

>> docker run --name db -d -v /Users/cristian/Documents/Platzi/Docker/Basics/mongodata:/data/db mongo
  => con el anterior comando compartimos los datos
  => que guarda mongo y los guardamos en el host.
  => para que no se pierdan cuando eliminamos el
  => container.

DOCKER VOLUMES:
Es la evolucion del bind mount, asi podemos
persistir data de una forma segura, sin
que procesos de nuestro computador afecten
dicha data.

Para ver los volumenes montados
>> docker volume ls
  => Eliminar volumenes
>> docker volume prune
  => Liberar memoria.

Creamos un volumen para la db data de mongo
>> docker volume create dbdata

Ahora asignamos el dbdata a un destino en el
  => contenedor.
>> docker run -d --name db --mount src=dbdata,dst=/data/db mongo

Con los volumes podemos persistir data en un
s3 si queremos, o en alguna otra parte remota.
https://docs.docker.com/storage/

Copiar archivos desde una imagen al host
>> docker cp 6f4b7dd3d07e:/etc/nginx/conf.d/default.conf ./defaultremote.conf
  => 6f4b7dd3d07e -> es el id del contenedor
  => :-> despues de los : la ubicación del archivo a copiar
  => la siguiente ruta es donde lo almacenamos en el host

corriendo nginx:

>> docker run -d --name lb -p 8080:80 -v /Users/cristian/Documents/Platzi/Docker/docker/nginx.conf:/etc/nginx/conf.d/default.conf:ro nginx
>> docker run -d --name lb -p 8080:80 -v nginx





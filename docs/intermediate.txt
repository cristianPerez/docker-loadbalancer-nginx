vemos los logs >> docker logs db
>> docker exec -it db bash

Persistir datos con docker:

 DOCKER BIND MOUNT:
 Como crear un contenedor con datos
 compartidos del sistema de archivos del
 host que no es del contenedor:

 Creamos un folder con mkdir antes de correr
 el contenedor.

>> docker run --name db -d -v /Users/cristian/Documents/Platzi/Docker/Basics/mongodata:/data/db mongo
  => con el anterior comando compartimos los datos
  => que guarda mongo y los guardamos en el host.
  => para que no se pierdan cuando eliminamos el
  => container.


🐳🐳🐳🐳🐳 DOCKER VOLUMES 🐳🐳🐳🐳🐳

Es la evolucion del bind mount, asi podemos
persistir data de una forma segura, sin
que procesos de nuestro computador afecten
dicha data.

Para ver los volumenes montados
>> docker volume ls
  => Eliminar volumenes
>> docker volume prune
  => Liberar memoria.

Creamos un volumen para la db data de mongo
>> docker volume create dbdata

Ahora asignamos el dbdata a un destino en el
  => contenedor.
>> docker run -d --name db --mount src=dbdata,dst=/data/db mongo

Con los volumes podemos persistir data en un
s3 si queremos, o en alguna otra parte remota.
https://docs.docker.com/storage/

Copiar archivos desde una imagen al host
>> docker cp 6f4b7dd3d07e:/etc/nginx/conf.d/default.conf ./defaultremote.conf
  => 6f4b7dd3d07e -> es el id del contenedor
  => :-> despues de los : la ubicación del archivo a copiar
  => la siguiente ruta es donde lo almacenamos en el host

corriendo nginx:

>> docker run -d --name lb -p 8080:80 -v /Users/cristian/Documents/Platzi/Docker/docker/nginx.conf:/etc/nginx/conf.d/default.conf:ro nginx
>> docker run -it --name lb -p 8080:80 -v nginx


